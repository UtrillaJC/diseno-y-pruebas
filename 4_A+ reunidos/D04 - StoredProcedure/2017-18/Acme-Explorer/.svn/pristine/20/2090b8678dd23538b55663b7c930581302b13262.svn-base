
package services;

import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Register;
import domain.Trip;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@Transactional
public class RegisterServiceTest extends AbstractTest {

	// Service under test ---------------------------------

	@Autowired
	private RegisterService	registerService;

	@Autowired
	private TripService		tripService;


	// Tests ----------------------------------------------

	@Test
	public void testCreate() {

		super.authenticate("manager1");								// Simulamos que estamos autenticados en el sistema

		Register register = null;
		Trip trip = null;

		trip = this.tripService.findOne(7151);					// Obtenemos un trip de la base de datos
		register = this.registerService.create(trip);				// Creamos trip utilizando el servicio

		// Comprobamos que los atributos...

		Assert.notNull(register.getMoment());						// moment: Date

		// Comprobamos que sus relaciones...

		Assert.notNull(register.getTrip());							// Register (0..*) - Trip (1)
		Assert.isNull(register.getTag());							// Register (0..*) - Tag (1)

		super.unauthenticate();										// Eliminamos la simulación de la autenticación

	}

	@Test
	public void testSave() {

		super.authenticate("manager1");								// Simulamos que estamos autenticados en el sistema

		Register register = null;
		Register saved = null;
		Collection<Register> registers = null;
		Trip trip = null;

		trip = this.tripService.findOne(7151);					// Obtenemos un trip de la base de datos
		register = this.registerService.create(trip);

		// Modificamos los atributos del register

		register.setMoment(new Date(System.currentTimeMillis()));

		saved = this.registerService.save(register);
		registers = this.registerService.findAll();

		Assert.isTrue(registers.contains(saved));

		super.unauthenticate();										// Eliminamos la simulación de la autenticación

	}

	@Test
	public void testDelete() {

		super.authenticate("manager1");								// Simulamos que estamos autenticados en el sistema

		Register register = null;
		Register saved = null;
		Collection<Register> registers = null;
		Trip trip = null;

		trip = this.tripService.findOne(7151);					// Obtenemos un trip de la base de datos
		register = this.registerService.create(trip);

		// Modificamos los atributos del register

		register.setMoment(new Date(System.currentTimeMillis()));

		saved = this.registerService.save(register);				// Persistimos el curriculum en la base de datos...
		this.registerService.delete(saved);							// ...y lo borramos de ella

		registers = this.registerService.findAll();					// Obtenemos todos los registers de la base de datos

		Assert.isTrue(!registers.contains(saved));					// Comprobamos que se ha eliminado y no persiste en la base de datos

		super.unauthenticate();										// Eliminamos la simulación de la autenticación

	}
}
