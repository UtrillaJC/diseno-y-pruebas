
package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Folder;
import domain.Ranger;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@Transactional
public class FolderServiceTest extends AbstractTest {

	// Service under test ---------------------------------

	@Autowired
	private FolderService	folderService;

	@Autowired
	private RangerService	rangerService;


	// Tests ----------------------------------------------

	@Test
	public void testCreate() {

		super.authenticate("ranger1");

		Folder folder = null;
		Ranger ranger = null;
		Boolean predefined = null;

		ranger = this.rangerService.findByPrincipal();

		Assert.notNull(ranger);
		Assert.isInstanceOf(Ranger.class, ranger);

		predefined = false;
		folder = null;

		folder = this.folderService.create(ranger, predefined, folder);

		Assert.isNull(folder.getName());
		Assert.isTrue(!folder.getPredefined());
		Assert.notNull(folder.getChildren());
		Assert.notNull(folder.getMessages());

		super.unauthenticate();
	}

	@Test
	public void testSave() {

		super.authenticate("ranger1");

		Folder folder = null;
		Folder saved = null;
		Ranger ranger = null;
		Boolean predefined = null;
		Collection<Folder> folders = null;

		ranger = this.rangerService.findByPrincipal();
		Assert.notNull(ranger);
		Assert.isInstanceOf(Ranger.class, ranger);

		predefined = false;

		folder = this.folderService.create(ranger, predefined, folder);

		folder.setName("Name");
		saved = this.folderService.save(folder);
		ranger.getFolders().add(saved);									// Probando

		folders = this.folderService.findAll();

		Assert.isTrue(folders.contains(folder));

		super.unauthenticate();
	}

	@Test
	public void testDelete() {

	}
}
