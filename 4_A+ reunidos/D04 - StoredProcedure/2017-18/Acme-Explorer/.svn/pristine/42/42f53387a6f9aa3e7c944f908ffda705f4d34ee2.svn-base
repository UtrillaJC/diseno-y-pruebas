package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import domain.Admin;
import domain.AuditRecord;
import domain.LegalText;
import domain.Trip;

import repositories.LegalTextRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;

@Service
@Transactional
public class LegalTextService {
 
	// Managed repository ----------------------------------
	
	@Autowired
	private LegalTextRepository legalTextRepository;
	
	// Supporting service -------------------------------------------
	
	@Autowired
	private AdminService adminService;
	
	@Autowired
	//private TripService tripService;
	
	// Simple CRUD methods ----------------------------------
	public LegalText create(Admin admin){
		Collection<Trip> trips=new ArrayList<Trip>();
		LegalText legalText= new LegalText();
		legalText.setMoment(new Date(System.currentTimeMillis()-1000));
	    legalText.setTrips(trips);
		return legalText;
		
	}
	
	public Collection<LegalText> findAll(){
		return this.legalTextRepository.findAll();
	}
	
	public LegalText findOne(int id){
		return this.legalTextRepository.findOne(id);
	}
	
	public LegalText save(LegalText legaText){
		Assert.notNull(legaText);
		return this.legalTextRepository.save(legaText);
	}
	
	public void delete(LegalText legalText){
		Assert.notNull(legalText);
		Assert.isTrue(legalText.isDraft());
		CheckByPrincipal();
		this.legalTextRepository.delete(legalText);
	}
	
	// Other business methods
	
	public void CheckByPrincipal(){
		Admin principal = adminService.findByPrincipal();
		Assert.isTrue(principal.getUserAccount().getAuthorities().contains(Authority.ADMIN));
		
	}
	
	public LegalText findOneToEdit(int legalTextId){
		LegalText legalText=legalTextRepository.findOne(legalTextId);
		Assert.isTrue(legalText.isDraft());
		return legalText;
	}
	
	public LegalText AsignarLegalTextATrip(Trip trip,LegalText legalText){
		Assert.notNull(trip);
		Assert.notNull(legalText);
		CheckByPrincipal();
		legalText.getTrips().add(trip);
		trip.setLegalText(legalText);
		save(legalText);
		//tripService.save(trip);
		return legalText;
		
		
	}
		
   

}
