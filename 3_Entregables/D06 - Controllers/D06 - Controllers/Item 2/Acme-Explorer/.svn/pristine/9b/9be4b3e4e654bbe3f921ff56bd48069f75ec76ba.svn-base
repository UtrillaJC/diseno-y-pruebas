
package controllers.admin;

import java.util.ArrayList;
import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import security.Authority;
import security.UserAccount;
import services.ActorService;
import services.AdminService;
import services.ManagerService;
import services.RangerService;
import services.UserAccountService;
import controllers.AbstractController;
import domain.Manager;
import domain.Ranger;

@Controller
@RequestMapping("/admin")
public class AdminSuspiciousController extends AbstractController {

	// Services ---------------------------------------------------------------
	@Autowired
	public ManagerService		managerService;

	@Autowired
	public RangerService		rangerService;

	@Autowired
	public AdminService			adminService;

	@Autowired
	public ActorService			actorService;

	@Autowired
	public UserAccountService	userAccountService;


	// Constructor -------------------------------------------------------------
	public AdminSuspiciousController() {
		super();
	}

	// Creating  --------------------------------------------------

	// Listing ---------------------------------------------------------

	@RequestMapping(value = "/listSuspicious", method = RequestMethod.GET)
	public ModelAndView listSuspicious() {
		ModelAndView result;
		Collection<Ranger> rangers;

		rangers = this.adminService.findSuspiciousRangers();
		result = new ModelAndView("admin/listSuspicious");
		result.addObject("rangers", rangers);

		return result;
	}

	@RequestMapping(value = "/desactivate", method = RequestMethod.GET)
	public ModelAndView desactivate(@RequestParam final int rangerId) {
		ModelAndView result = null;
		Ranger ranger;
		UserAccount userAccount;
		ranger = this.rangerService.findOne(rangerId);
		Assert.notNull(ranger);

		try {
			userAccount = ranger.getUserAccount();
			userAccount.setEnable(false);
			this.userAccountService.save(userAccount);

			result = new ModelAndView("admin/listSuspicious");

		} catch (final Throwable oops) {
			//result.addObject("message", "admin.commit.error");
		}

		return result;
	}
	//	@RequestMapping(value = "/disenrol", method = RequestMethod.GET)
	//	public ModelAndView disenrol(@RequestParam final int survivalClassId) {
	//		ModelAndView result;
	//		SurvivalClass survivalClass;
	//		Explorer explorer;
	//
	//		survivalClass = this.survivalClassService.findOne(survivalClassId);
	//		Assert.notNull(survivalClass);
	//		explorer = this.explorerService.findByPrincipal();
	//
	//		try {
	//			this.survivalClassService.disenrolAnExplorerToSurvivalClass(explorer, survivalClass);
	//			result = this.listNotEnrolled();
	//			result.addObject("requestURI", "survivalClass/explorer/list-notenrolled.do");
	//			result.addObject("message", "survivalClass.commit.ok");
	//		} catch (final Throwable oops) {
	//			result = this.display(survivalClassId);
	//			result.addObject("message", "survivalClass.commit.error");
	//		}
	//
	//		return result;
	//	}
	// Ancillary methods ------------------------------------------------------------

	protected ModelAndView createEditModelAndView(final Manager user) {
		ModelAndView result;

		result = this.createEditModelAndView(user, null);

		return result;
	}

	protected ModelAndView createEditModelAndView(final Manager manager, final String message) {
		ModelAndView result;
		Collection<Authority> authorities;
		Authority authorityManager;

		authorityManager = new Authority();
		authorities = new ArrayList<>();
		authorityManager.setAuthority(Authority.MANAGER);
		authorities.add(authorityManager);

		result = new ModelAndView("manager/admin/register");
		result.addObject("manager", manager);
		result.addObject("authorities", authorities);
		result.addObject("message", message);

		return result;
	}
}
