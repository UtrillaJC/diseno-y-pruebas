
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.FinderRepository;
import security.LoginService;
import security.UserAccount;
import domain.Explorer;
import domain.Finder;
import domain.Trip;

@Service
@Transactional
public class FinderService {

	// Managed repository -----------------------------------------------------

	@Autowired
	private FinderRepository	finderRepository;

	// Supporting services ----------------------------------------------------

	@Autowired
	private ExplorerService		explorerService;


	// Constructors -----------------------------------------------------------

	public FinderService() {
		super();
	}

	// Simple CRUD methods ----------------------------------------------------

	public Finder create(final Explorer explorer) {

		Assert.notNull(explorer);

		Finder result = null;
		result = new Finder();
		result.setLastUpdate(new Date(System.currentTimeMillis() - 1000));
		//result.setExplorer(explorer);
		explorer.setFinder(result);
		result.setTrips(new ArrayList<Trip>());
		return result;
	}

	public Finder findOne(final int finderId) {

		Finder result = null;
		result = this.finderRepository.findOne(finderId);
		return result;
	}

	public Collection<Finder> findAll() {

		Collection<Finder> result = null;
		result = this.finderRepository.findAll();
		return result;
	}

	public Finder save(final Finder finder) {

		Assert.notNull(finder);

		Finder result = null;
		result = this.finderRepository.save(finder);
		result.setLastUpdate(new Date(System.currentTimeMillis() - 1000));

		return result;
	}

	// Other business methods -------------------------------------------------

	public Finder findByPrincipal() {

		Finder result = null;
		final UserAccount userAccount = LoginService.getPrincipal();
		result = this.findByUserAccountId(userAccount.getId());
		return result;
	}

	public Finder findByUserAccountId(final int userAccountId) {

		Finder result = null;
		result = this.explorerService.findFinderByUserAccountId(userAccountId);
		//result = this.finderRepository.findByUserAccountId(userAccountId);
		return result;
	}

	public void checkByPrincipal(final Finder finder) {

		Explorer explorer = null;
		Explorer explorerFinder = null;

		explorer = this.explorerService.findByPrincipal();
		explorerFinder = this.explorerService.findExplorerByFinderId(finder.getId());

		Assert.isTrue(explorer.equals(explorerFinder));
	}

	public Finder assignTripsToFinder(final Finder finder, final Collection<Trip> trips) {
		Assert.notNull(finder);

		finder.setTrips(trips);

		return finder;

	}

	public void deleteReferenceTrip(final Trip trip) {
		final Collection<Finder> finders = this.finderRepository.findFinderByTrip(trip);

		for (final Finder f : finders) {
			f.getTrips().remove(trip);
			this.save(f);
		}

	}

	public Collection<Trip> findTripsPerFinder(final Finder finder) {

		Collection<Trip> res = null;

		res = new ArrayList<Trip>();
		res = this.finderRepository.findTripsPerFinder(finder.getKeyword(), finder.getKeyword(), finder.getKeyword(), finder.getKeyword(), finder.getStartDateTripMin(), finder.getStartDateTripMax(), finder.getPriceMin().getAmount(), finder.getPriceMax()
			.getAmount());

		return res;
	}

}
