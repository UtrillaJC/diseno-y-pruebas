
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Application;
import domain.AuditRecord;
import domain.Category;
import domain.Finder;
import domain.HasValue;
import domain.LegalText;
import domain.Manager;
import domain.Money;
import domain.Note;
import domain.Ranger;
import domain.Sponsorship;
import domain.Stage;
import domain.Story;
import domain.SurvivalClass;
import domain.Trip;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@Transactional
public class TripServiceTest extends AbstractTest {

	@Autowired
	private TripService			tripService;

	@Autowired
	private CategoryService		categoryService;

	@Autowired
	private LegalTextService	legalTextService;

	@Autowired
	private ManagerService		mangerService;

	@Autowired
	private RangerService		rangerService;

	@Autowired
	private StageService		stageService;


	@Test
	public void testCreate() {

		super.authenticate("manager1");

		Trip trip = null;
		Stage stage = null;

		final Collection<Stage> stages = new ArrayList<Stage>();

		stage = this.stageService.create();

		stages.add(stage);

		trip = this.tripService.create(stages);
		//TODO preguntar las fechas a Juan
		Assert.notNull(trip.getTicker());
		Assert.isNull(trip.getTitle());
		Assert.isNull(trip.getDescription());
		Assert.notNull(trip.getRequirements());
		Assert.isNull(trip.getPublicationDate());
		Assert.isNull(trip.getStartDateTrip());
		Assert.isNull(trip.getEndDateTrip());
		Assert.isNull(trip.getCancelledReason());
		Assert.isNull(trip.getPrice());
		Assert.notNull(trip.getNotes());
		Assert.notNull(trip.getAuditRecords());
		Assert.notNull(trip.getStories());
		Assert.notNull(trip.getApplications());
		Assert.notNull(trip.getFinders());
		Assert.notNull(trip.getSurvivalClasses());
		Assert.notNull(trip.getSponsorships());
		Assert.notNull(trip.getStages());
		Assert.notNull(trip.getHasValues());

		super.unauthenticate();
	}

	@Test
	public void testSave() {

		super.authenticate("manager1");

		Trip trip = null;
		Trip tripSaved = null;
		Collection<Trip> trips = null;
		Stage stage = null;

		Category category = null;
		Date endDateTrip = null;
		Date publicationDate = null;
		Date startDateTrip = null;
		LegalText legalText = null;
		Manager manager = null;
		Money price = null;
		Ranger ranger = null;
		Collection<Stage> stages = null;
		price = new Money();
		stages = new ArrayList<Stage>();

		price.setAmount(10.0);
		price.setCurrency("$");

		stage = this.stageService.create();
		stage.setDescription("Description 1");
		stage.setPrice(price);
		stage.setTitle("Title 1");

		stages.add(stage);
		manager = this.mangerService.findByPrincipal();
		ranger = this.rangerService.findOne(7152);
		legalText = this.legalTextService.findOne(7201);
		endDateTrip = new Date(2020, 01, 10, 20, 10);
		publicationDate = new Date(2019, 01, 10, 20, 10);
		startDateTrip = new Date(2019, 05, 10, 20, 10);
		category = this.categoryService.findOne(7162);

		trip = this.tripService.create(stages);

		trip.setApplications(new ArrayList<Application>());
		trip.setAuditRecords(new ArrayList<AuditRecord>());
		trip.setCancelledReason("Cancelled reason");
		trip.setCategory(category);
		trip.setDescription("Description 1");
		trip.setEndDateTrip(endDateTrip);
		trip.setFinders(new ArrayList<Finder>());
		trip.setHasValues(new ArrayList<HasValue>());
		trip.setLegalText(legalText);
		trip.setManager(manager);
		trip.setNotes(new ArrayList<Note>());
		trip.setPrice(price);
		trip.setPublicationDate(publicationDate);
		trip.setRanger(ranger);
		trip.setRequirements(new ArrayList<String>());
		trip.setSponsorships(new ArrayList<Sponsorship>());
		trip.setStartDateTrip(startDateTrip);
		trip.setStories(new ArrayList<Story>());
		trip.setSurvivalClasses(new ArrayList<SurvivalClass>());
		trip.setTicker("170101-ABAH");
		trip.setTitle("Title 1");

		tripSaved = this.tripService.save(trip, stage);
		trips = this.tripService.findAll();

		Assert.isTrue(trips.contains(tripSaved));

		super.unauthenticate();
	}

	@Test
	public void testDelete() {

		super.authenticate("manager1");

		Trip trip = null;
		Trip tripSaved = null;
		Collection<Trip> trips = null;
		Stage stage = null;

		Category category = null;
		Date endDateTrip = null;
		Date publicationDate = null;
		Date startDateTrip = null;
		LegalText legalText = null;
		Manager manager = null;
		Money price = null;
		Ranger ranger = null;
		Collection<Stage> stages = null;
		price = new Money();
		stages = new ArrayList<Stage>();

		price.setAmount(10.0);
		price.setCurrency("$");

		stage = this.stageService.create();
		stage.setDescription("Description 1");
		stage.setPrice(price);
		stage.setTitle("Title 1");

		stages.add(stage);
		manager = this.mangerService.findByPrincipal();
		ranger = this.rangerService.findOne(7152);
		legalText = this.legalTextService.findOne(7201);
		endDateTrip = new Date(2020, 01, 10, 20, 10);
		publicationDate = new Date(2019, 01, 10, 20, 10);
		startDateTrip = new Date(2019, 05, 10, 20, 10);
		category = this.categoryService.findOne(7162);

		trip = this.tripService.create(stages);

		trip.setApplications(new ArrayList<Application>());
		trip.setAuditRecords(new ArrayList<AuditRecord>());
		trip.setCancelledReason("Cancelled reason");
		trip.setCategory(category);
		trip.setDescription("Description 1");
		trip.setEndDateTrip(endDateTrip);
		trip.setFinders(new ArrayList<Finder>());
		trip.setHasValues(new ArrayList<HasValue>());
		trip.setLegalText(legalText);
		trip.setManager(manager);
		trip.setNotes(new ArrayList<Note>());
		trip.setPrice(price);
		trip.setPublicationDate(publicationDate);
		trip.setRanger(ranger);
		trip.setRequirements(new ArrayList<String>());
		trip.setSponsorships(new ArrayList<Sponsorship>());
		trip.setStartDateTrip(startDateTrip);
		trip.setStories(new ArrayList<Story>());
		trip.setSurvivalClasses(new ArrayList<SurvivalClass>());
		trip.setTicker("170101-ABAH");
		trip.setTitle("Title 1");

		tripSaved = this.tripService.save(trip, stage);
		this.tripService.delete(tripSaved);
		trips = this.tripService.findAll();

		Assert.isTrue(!trips.contains(tripSaved));

		super.unauthenticate();
	}
}
