
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.SponsorshipRepository;
import domain.Sponsor;
import domain.Sponsorship;
import domain.Trip;

@Service
@Transactional
public class SponsorshipService {

	// Managed Repository -------------------------------------------------------

	@Autowired
	private SponsorshipRepository	sponsorshipRepository;
	
	// Supporting service -------------------------------------------------------
	
	@Autowired
	private TripService tripService;
	
	@Autowired
	private SponsorService sponsorService;
	
	


	// Simple CRUD methods -------------------------------------------------------

	public Sponsorship create() {
		final Sponsorship sponsorship = new Sponsorship();
		
		Sponsor sponsor = sponsorService.findByPrincipal();
		sponsorship.setSponsor(sponsor);
		return sponsorship;
	}

	public Collection<Sponsorship> findAll() {
		return this.sponsorshipRepository.findAll();
	}

	public Sponsorship findOne(final int id) {
		return this.sponsorshipRepository.findOne(id);
	}

	public Sponsorship save(final Sponsorship sponsorship) {
		Assert.notNull(sponsorship);
		return this.sponsorshipRepository.save(sponsorship);
	}

	public void delete(final Sponsorship sponsorship) {
		this.sponsorshipRepository.delete(sponsorship);
	}
	
	public Sponsorship assignSponsorshipToTrip(Trip trip){
		Sponsorship sponsorship;
		Collection<Sponsorship> sponsorships =sponsorshipRepository.findAll();
		List<Sponsorship> list=new ArrayList<Sponsorship>(sponsorships); 
		Random r= new Random();
		Integer i=r.nextInt(list.size());
		sponsorship=list.get(i);
		sponsorship.setTrip(trip);
		trip.getSponsorships().add(sponsorship);
		save(sponsorship);
		tripService.save(trip);
		return sponsorship;
		
		
	}

	// Other business methods -------------------------------------------------

	public void deleteBySponsor(final Sponsor sponsor) {

		final Collection<Sponsorship> sponsorships = this.findBySponsor(sponsor);
		this.sponsorshipRepository.delete(sponsorships);
	}

	public Collection<Sponsorship> findBySponsor(final Sponsor sponsor) {

		Collection<Sponsorship> result = null;
		result = this.sponsorshipRepository.findBySponsor(sponsor);
		return result;
	}

}
