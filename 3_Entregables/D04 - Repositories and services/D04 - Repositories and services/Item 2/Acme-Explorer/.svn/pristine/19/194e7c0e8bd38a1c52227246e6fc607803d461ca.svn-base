package services;

import java.util.ArrayList;
import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import domain.Admin;
import domain.AuditRecord;
import domain.Auditor;
import domain.LegalText;
import domain.Note;
import domain.Trip;

import utilities.AbstractTest;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring/datasource.xml",
		"classpath:spring/config/packages.xml" })
@Transactional
public class AuditRecordServiceTest extends AbstractTest {

	// Service under tests

	@Autowired
	private AuditRecordService auditRecordService;

	@Autowired
	private AuditorService auditorService;

	@Autowired
	private TripService tripService;

	// Tests ---------------------------------------------------------

	@Test
	public void testCreate() {
		AuditRecord auditRecord;

		super.authenticate("auditor1");
		auditRecord = auditRecordService.create();
		Assert.notNull(auditRecord.getMoment());
		Assert.isNull(auditRecord.getDescription());
		Assert.notNull(auditRecord.getFinalVersion());
		Assert.isNull(auditRecord.getTitle());
		super.unauthenticate();

	}

	@Test
	public void testSave() {

		AuditRecord auditRecord, saved;

		super.authenticate("auditor1");
		// Auditor a= this.auditorService.findByPrincipal();
		auditRecord = auditRecordService.create();
		Collection<String> attachments = new ArrayList<String>();
		String att = "http://www.attachement1.com";
		auditRecord.setAttachments(attachments);
		Trip trip = tripService.findOne(7151);
		auditRecord.setTrip(trip);
		auditRecord.setDescription("description1");
		auditRecord.setFinalVersion(true);
		auditRecord.setTitle("title1");
		saved = auditRecordService.save(auditRecord);
		Collection<AuditRecord> auditRecords = auditRecordService.findAll();
		Assert.isTrue(auditRecords.contains(saved));
		super.unauthenticate();
	}

	@Test
	public void testDelete() {
		AuditRecord auditRecord, saved;

		super.authenticate("auditor1");
		// Auditor a= this.auditorService.findByPrincipal();
		auditRecord = auditRecordService.create();
		Collection<String> attachments = new ArrayList<String>();
		String att = "http://www.attachement1.com";
		auditRecord.setAttachments(attachments);
		attachments.add(att);
		Trip trip = tripService.findOne(7151);
		auditRecord.setTrip(trip);
		auditRecord.setDescription("description1");
		auditRecord.setFinalVersion(false);
		auditRecord.setTitle("title1");
		saved = auditRecordService.save(auditRecord);
		auditRecordService.delete(saved);
		Collection<AuditRecord> auditRecords = auditRecordService.findAll();
		Assert.isTrue(!auditRecords.contains(saved));
		super.unauthenticate();

	}

	@Test
	public void testFindOneToEdit() {
		AuditRecord auditRecord, saved, auditRecordRetrieved;

		super.authenticate("auditor1");
		// Auditor a= this.auditorService.findByPrincipal();
		auditRecord = auditRecordService.create();
		Collection<String> attachments = new ArrayList<String>();
		String att = "http://www.attachement1.com";
		attachments.add(att);
		auditRecord.setAttachments(attachments);
		Trip trip = tripService.findOne(7151);
		auditRecord.setTrip(trip);
		auditRecord.setDescription("description1");
		auditRecord.setFinalVersion(false);
		auditRecord.setTitle("title1");
		saved = auditRecordService.save(auditRecord);
		auditRecordRetrieved = this.auditRecordService.findOneToEdit(saved
				.getId());
		Assert.isTrue(saved == auditRecordRetrieved);
		super.unauthenticate();
	}

	@Test
	public void testAssignAuditRecordToTrip() {
		AuditRecord auditRecord, saved, savedAuditRecord;

		super.authenticate("auditor1");
		auditRecord = auditRecordService.create();
		Collection<String> attachments = new ArrayList<String>();
		String att = "http://www.attachement1.com";
		attachments.add(att);
		auditRecord.setAttachments(attachments);
		Trip trip = tripService.findOne(7151);
		auditRecord.setTrip(trip);
		auditRecord.setDescription("description1");
		auditRecord.setFinalVersion(false);
		auditRecord.setTitle("title1");
		savedAuditRecord = auditRecordService.save(auditRecord);
		saved = auditRecordService.assignAuditRecordToTrip(savedAuditRecord,
				trip);

		Assert.isTrue(trip.getAuditRecords().contains(saved));
		Assert.isTrue(saved.getTrip().equals(trip));
		super.unauthenticate();
	}

	@Test
	public void testDeleteByAuditor() {
		super.authenticate("auditor1");
		Auditor auditor = auditorService.findByPrincipal();
		Collection<AuditRecord> auditRecords = auditor.getAuditRecords();
		auditRecordService.deleteByAuditor(auditor);
		Assert.isTrue(!auditor.getAuditRecords().contains(auditRecords));
	}

	@Test
	public void testFindByAuditor() {
		super.authenticate("auditor1");
		Auditor auditor = auditorService.findByPrincipal();
		Collection<AuditRecord> auditRecords = auditor.getAuditRecords();
		Assert.isTrue(auditor.getAuditRecords().equals(auditRecords));

	}
	
	

}
