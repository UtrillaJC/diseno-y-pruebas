
package services;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Actor;
import domain.Folder;
import domain.Message;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@Transactional
public class MessageServiceTest extends AbstractTest {

	// Service under test ---------------------------------

	@Autowired
	private MessageService	messageService;

	@Autowired
	private ActorService	actorService;


	// Tests ----------------------------------------------

	@Test
	public void testCreate() {
		final Message message;
		final Actor sender;

		super.authenticate("manager1");

		sender = this.actorService.findByPrincipal();
		message = this.messageService.Create(sender);
		Assert.isTrue(message.getSender().equals(sender));

		final List<Folder> folders_sender = new ArrayList<Folder>(sender.getFolders());
		Assert.isTrue(message.getFolder().equals(folders_sender.get(1)));

		super.unauthenticate();
	}

	@Test
	public void testSave() {
		Actor sender, reciever;
		Message message;

		super.authenticate("manager1");
		sender = this.actorService.findByPrincipal();
		reciever = this.actorService.findOne(7149);
		message = this.messageService.Create(sender);
		message.setSubject("Trip information");
		message.setBody("This is the body of the message to explorer1 from manager1.");
		message.getRecipients().add(reciever);
		this.messageService.save(message);

		Assert.isTrue(this.messageService.findAll().contains(message));

	}

	@Test
	public void testSend_Message() {
		Actor sender, reciever;
		Message messageToSend, sentMessage;

		super.authenticate("manager1");
		sender = this.actorService.findByPrincipal();
		reciever = this.actorService.findOne(7150);
		messageToSend = this.messageService.Create(sender);
		messageToSend.setSubject("Trip information");
		messageToSend.setBody("This is the body of the message to explorer1 from manager1.");
		messageToSend.getRecipients().add(reciever);

		sentMessage = this.messageService.sendMessage(messageToSend);

		Assert.isTrue(sender.getSentMessages().contains(sentMessage));
		Assert.isTrue(reciever.getRecipientMessages().iterator().next().getSender().equals(sender));

		super.unauthenticate();
	}

	@Test
	public void testSend_Spam_Message() {
		Actor sender, reciever;
		Message messageToSend, sentMessage;
		Folder spamBox;

		super.authenticate("manager1");
		sender = this.actorService.findByPrincipal();
		reciever = this.actorService.findOne(7150);
		messageToSend = this.messageService.Create(sender);
		messageToSend.setSubject("Trip information ");
		messageToSend.setBody("This is the body of the SeX message to explorer1 from manager1.");
		messageToSend.getRecipients().add(reciever);

		sentMessage = this.messageService.sendMessage(messageToSend);
		final List<Folder> folders_reciever = new ArrayList<Folder>(reciever.getFolders());
		spamBox = folders_reciever.get(4);

		Assert.isTrue(sender.getDeactivated());
		Assert.isTrue(!spamBox.getMessages().isEmpty());

	}

}
