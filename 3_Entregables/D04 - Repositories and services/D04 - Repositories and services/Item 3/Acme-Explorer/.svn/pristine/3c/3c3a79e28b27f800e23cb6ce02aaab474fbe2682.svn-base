
package services;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.CategoryRepository;
import domain.Admin;
import domain.Category;
import domain.Trip;

@Service
@Transactional
public class CategoryService {

	// Managed repository -----------------------------------------------------

	@Autowired
	private CategoryRepository	categoryRepository;

	// Supporting services ----------------------------------------------------

	@Autowired
	private AdminService		adminService;


	// Constructors -----------------------------------------------------------

	public CategoryService() {
		super();
	}

	// Simple CRUD methods ----------------------------------------------------

	public Category create(final Category category) {

		final Admin principal = this.adminService.findByPrincipal();

		Assert.notNull(category);
		Assert.isInstanceOf(Admin.class, principal);

		final Category res = new Category();

		res.setParentCategory(category);
		category.getChildrenCategories().add(res);
		res.setAdmin(principal);
		return res;
	}

	public Category findOne(final int categoryId) {

		Assert.notNull(categoryId);
		final Category res = this.categoryRepository.findOne(categoryId);
		return res;

	}

	public Collection<Category> findAll() {

		final Admin principal = this.adminService.findByPrincipal();

		Assert.isInstanceOf(Admin.class, principal);

		final Collection<Category> res = this.categoryRepository.findAll();
		return res;

	}

	public Category save(final Category category) {

		final Admin principal = this.adminService.findByPrincipal();

		Assert.notNull(category);
		Assert.isInstanceOf(Admin.class, principal);

		Assert.isTrue(!category.getName().equals(category.getParentCategory().getName()));
		Assert.isTrue(!category.getParentCategory().getChildrenCategories().contains(category));

		final Category res = this.categoryRepository.save(category);

		return res;

	}

	public void delete(final Category category) {

		final Admin principal = this.adminService.findByPrincipal();

		Assert.notNull(category);
		Assert.isInstanceOf(Admin.class, principal);

		if (category.getChildrenCategories().isEmpty())
			this.categoryRepository.delete(category);
		else {
			category.getChildrenCategories().clear();
			this.categoryRepository.delete(category);
		}

	}

	// Other business methods -------------------------------------------------

	public Collection<Trip> findAllTripByCategoryID(final int categoryId) {

		Assert.notNull(categoryId);
		final Collection<Trip> res = this.categoryRepository.findAllTripByCategoryID(categoryId);
		return res;

	}

	public Collection<Category> findCategoryChildrenID(final int categoryId) {

		Assert.notNull(categoryId);
		final Collection<Category> res = this.categoryRepository.findCategoryChildrenID(categoryId);
		return res;

	}

}
