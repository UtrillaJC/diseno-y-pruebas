
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.MessageRepository;
import security.Authority;
import domain.Actor;
import domain.Admin;
import domain.Application;
import domain.Explorer;
import domain.Folder;
import domain.Manager;
import domain.Message;
import domain.Priority;
import domain.Ranger;

@Service
@Transactional
public class MessageService {

	// Manager Repository

	@Autowired
	private MessageRepository		messageRepository;

	// Supported Services
	@Autowired
	private FolderService			folderService;

	@Autowired
	private ActorService			actorService;
	@Autowired
	private ConfigurationService	configurationService;
	@Autowired
	private ManagerService			managerService;
	@Autowired
	private RangerService			rangerService;

	@Autowired
	private AdminService			adminService;


	// Crud Methods

	public Message create(final Actor sender) {
		Message message;
		Folder outbox;
		Collection<Folder> folders;
		Collection<Actor> recepients;

		message = new Message();
		message.setSender(sender);
		message.setMoment(new Date(System.currentTimeMillis() - 1000));

		folders = sender.getFolders();
		final List<Folder> folders_sender = new ArrayList<Folder>(folders);

		outbox = folders_sender.get(1);
		message.setFolder(outbox);
		recepients = new ArrayList<>();
		message.setRecipients(recepients);

		return message;
	}

	public void delete(final Message message) {
		this.checkByPrincipal(message);

		final Folder folder = message.getFolder();
		Folder trashbox;

		if (folder.getName() != "trashbox") {
			final Actor actor = message.getFolder().getActor();

			final List<Folder> folders = new ArrayList<Folder>(actor.getFolders());
			trashbox = folders.get(3);
			message.setFolder(trashbox);
			folder.getMessages().remove(message);

			this.folderService.save(folder);
			this.messageRepository.save(message);

		} else {
			folder.getMessages().remove(message);
			this.folderService.save(folder);
			this.messageRepository.delete(message);
		}
	}

	public Message findOne(final int id) {
		return this.messageRepository.findOne(id);
	}

	public Collection<Message> findAll() {
		return this.messageRepository.findAll();
	}

	public Message save(final Message message) {
		Assert.notNull(message);
		message.setMoment(new Date(System.currentTimeMillis() - 1000));
		return this.messageRepository.save(message);
	}

	// Other business Methods

	public void deleteByFolder(final Folder folder) {

		final Collection<Message> messages = folder.getMessages();
		this.messageRepository.delete(messages);
	}

	public void deleteByActor(final Actor actor) {

		final Collection<Message> messages = actor.getSentMessages();
		messages.addAll(actor.getRecipientMessages());
		this.messageRepository.deleteInBatch(messages);
	}

	public Message sendMessage(final Message message) {
		Assert.notNull(message);

		Actor sender;
		Collection<Actor> recievers;
		Folder inboxReciever;
		Folder outboxSender;

		sender = message.getSender();
		final List<Folder> folders_sender = new ArrayList<Folder>(sender.getFolders());
		outboxSender = folders_sender.get(1);

		//  SPAM Control
		if (this.isSpam(message))
			return this.sendMessageSpam(message, sender);

		recievers = message.getRecipients();

		for (final Actor reciever : recievers) {
			final List<Folder> folders_reciever = new ArrayList<Folder>(reciever.getFolders());
			inboxReciever = folders_reciever.get(0);
			final Message copyOfmessage = this.messageRepository.save(message);

			copyOfmessage.setFolder(inboxReciever);
			reciever.getRecipientMessages().add(message);
			inboxReciever.getMessages().add(copyOfmessage);
			this.actorService.save(reciever);
			this.folderService.save(inboxReciever);
			this.save(copyOfmessage);
		}

		sender.getSentMessages().add(message);
		sender.getSentMessages().add(message);
		outboxSender.getMessages().add(message);
		this.actorService.save(sender);
		this.folderService.save(outboxSender);
		this.save(message);

		return message;
	}

	private Message sendMessageSpam(final Message message, final Actor sender) {
		Collection<Actor> recievers;
		Folder spamBoxReciever;
		Folder outboxSender;

		recievers = message.getRecipients();

		for (final Actor reciever : recievers) {
			final List<Folder> folders_reciever = new ArrayList<Folder>(reciever.getFolders());
			spamBoxReciever = folders_reciever.get(4);
			final Message copyOfmessage = this.messageRepository.save(message);

			copyOfmessage.setFolder(spamBoxReciever);
			reciever.getRecipientMessages().add(copyOfmessage);
			spamBoxReciever.getMessages().add(copyOfmessage);
			this.actorService.save(reciever);
			this.folderService.save(spamBoxReciever);
			this.save(copyOfmessage);
		}
		// desactivar la cuenta del sender y marcarlo como suspicious si el sender es Manager o Ranger.

		final Collection<Authority> test = sender.getUserAccount().getAuthorities();
		final String authority = test.toArray()[0].toString();

		if (authority.equals("MANAGER")) {
			final Manager manager = this.managerService.findByUserAccountId(sender.getUserAccount().getId());
			manager.setSuspicious(true);
			this.managerService.save(manager);
		} else if (authority.equals("RANGER")) {
			final Ranger ranger = this.rangerService.findByPrincipal();
			ranger.setSuspicious(true);
			this.rangerService.save(ranger);
		}

		final List<Folder> folders_sender = new ArrayList<Folder>(sender.getFolders());
		outboxSender = folders_sender.get(1);

		sender.setDeactivated(true);
		sender.getSentMessages().add(message);
		outboxSender.getMessages().add(message);
		// save del copy y del sender en Repo
		this.actorService.save(sender);
		this.folderService.save(outboxSender);
		this.save(message);

		return message;
	}

	public Message notifyMessage(final Message message) {
		Assert.notNull(message);
		// TODO: Control de SPAM ?

		Actor sender;
		Collection<Actor> recievers;
		Folder notificationBox;
		Folder outboxSender;

		// TODO: Notificar message a mas de un actor. 

		sender = message.getSender();
		recievers = message.getRecipients();

		for (final Actor reciever : recievers) {
			final List<Folder> folders_reciever = new ArrayList<Folder>(reciever.getFolders());
			notificationBox = folders_reciever.get(2);
			final Message copyOfmessage = this.save(message);

			copyOfmessage.setFolder(notificationBox);
			reciever.getRecipientMessages().add(copyOfmessage);
			notificationBox.getMessages().add(copyOfmessage);
		}

		final List<Folder> folders_sender = new ArrayList<Folder>(sender.getFolders());
		outboxSender = folders_sender.get(1);

		message.setFolder(outboxSender);
		sender.getSentMessages().add(message);
		sender.getSentMessages().add(message);

		return message;
	}
	public void moveMessageToFolder(final Message message, final Folder folder) {
		Assert.notNull(folder);
		Assert.notNull(message);
		this.folderService.checkPrincipal(folder);
		Assert.isTrue(!folder.getMessages().contains(message));
		final Actor actor = folder.getActor();
		Assert.isTrue(actor.getRecipientMessages().contains(message) || actor.getSentMessages().contains(message));

		final List<Message> messages = new ArrayList<Message>(folder.getMessages());
		final Folder folderSource = message.getFolder();
		final List<Message> messages2 = new ArrayList<Message>(folderSource.getMessages());

		messages.add(message);
		folder.setMessages(messages);
		messages2.remove(message);
		folderSource.setMessages(messages2);

		this.folderService.save(folder);
		message.setFolder(folder);
		this.save(message);
	}

	public void checkByPrincipal(final Message message) {
		final Actor actor = this.actorService.findByPrincipal();
		Assert.isTrue(actor.getRecipientMessages().contains(message) || message.getSender().equals(actor));
	}

	private boolean isSpam(final Message message) {
		boolean result = false;
		Pattern p;
		Matcher matcher_body;
		Matcher matcher_subject;

		p = this.spamWords();
		matcher_body = p.matcher(message.getBody());
		matcher_subject = p.matcher(message.getSubject());

		if (matcher_body.find() || matcher_subject.find())
			result = true;

		return result;
	}

	public Pattern spamWords() {
		Pattern result;
		List<String> spamWords;

		final Collection<String> spamlist = this.configurationService.findAll().iterator().next().getSpamWords();
		spamWords = new ArrayList<>(spamlist);

		String str = ".*\\b(";
		for (int i = 0; i <= spamWords.size(); i++)
			if (i < spamWords.size())
				str += spamWords.get(i) + "|";
			else
				str += spamWords.iterator().next() + ")\\b.*";

		result = Pattern.compile(str, Pattern.CASE_INSENSITIVE);

		return result;
	}

	public void notifyChangeInApplicationStatus(final Application application) {
		final Manager manager = application.getTrip().getManager();
		final Explorer applicant = application.getApplicant();
		final List<Actor> recipients = new ArrayList<>();
		recipients.add(manager);
		recipients.add(applicant);
		final Admin admin = this.adminService.findAll().iterator().next();

		final Message message = new Message();
		message.setRecipients(recipients);
		message.setSender(admin);
		message.setSubject("Application status has changed");
		message.setBody("The application in reference to the Trip:" + application.getTrip().getTitle() + " has changed to " + application.getStatus());
		message.setPriority(Priority.HIGH);
		message.setMoment(new Date());
		Folder outbox = null;
		outbox = new ArrayList<Folder>(admin.getFolders()).get(1);
		message.setFolder(outbox);
		this.notifyMessage(message);

	}

}
