
package services;

import java.util.Collection;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.util.Assert;

import utilities.AbstractTest;
import domain.Actor;
import domain.Admin;
import domain.Folder;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
	"classpath:spring/datasource.xml", "classpath:spring/config/packages.xml"
})
@Transactional
public class AdminServiceTest extends AbstractTest {

	// Service under test ---------------------------------

	@Autowired
	private AdminService	adminService;

	@Autowired
	private FolderService	folderService;

	@Autowired
	private ActorService	actorService;


	// Tests ----------------------------------------------

	@Test
	public void testCreate() {

		Admin admin;

		admin = this.adminService.create();
		Assert.notNull(admin.getCategories());
		Assert.notNull(admin.getFolders());
		Assert.notNull(admin.getRecipientMessages());
		Assert.notNull(admin.getSentMessages());
		Assert.notNull(admin.getSocialIdentities());
		Assert.isTrue(admin.getDeactivated() == false);
		Assert.notNull(admin.getUserAccount());
		Assert.isNull(admin.getName());
		Assert.isNull(admin.getSurname());
		Assert.isNull(admin.getEmail());
		Assert.isNull(admin.getAddress());
		Assert.isNull(admin.getPhone());
	}

	@Test
	public void testSave() {

		Admin admin, saved;

		admin = this.adminService.create();
		admin.setName("Admin 1");
		admin.setSurname("Admin 1");
		admin.setEmail("admin1@acmeexplorer.com");
		admin.setAddress("Admin 1 Street");
		admin.setPhone("111111111");
		admin.getUserAccount().setUsername("admin11");
		admin.getUserAccount().setPassword("admin11");
		saved = this.adminService.save(admin);
		final Collection<Actor> actors = this.actorService.findAll();
		final Collection<Folder> folders = this.folderService.findAll();
		Assert.isTrue(actors.contains(saved));
		Assert.isTrue(folders.containsAll(saved.getFolders()));
	}

	@Test
	public void testDelete() {

		Admin admin, saved;

		admin = this.adminService.create();
		admin.setName("Admin 1");
		admin.setSurname("Admin 1");
		admin.setEmail("admin1@acmeexplorer.com");
		admin.setAddress("Admin 1 Street");
		admin.setPhone("111111111");
		admin.getUserAccount().setUsername("admin11");
		admin.getUserAccount().setPassword("admin11");
		saved = this.adminService.save(admin);
		this.adminService.delete(saved);
		final Collection<Admin> admins = this.adminService.findAll();
		Assert.isTrue(!admins.contains(saved));
	}

	@Test
	public void testFindByPrincipal() {

		Admin admin;

		super.authenticate("admin1");
		admin = this.adminService.findByPrincipal();
		Assert.isTrue(admin.getUserAccount().getUsername().equals("admin1"));
		super.authenticate(null);
	}

}
